# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import datastore_pb2 as datastore__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in datastore_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DatastoreServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StrSet = channel.unary_unary(
                '/datastore.DatastoreService/StrSet',
                request_serializer=datastore__pb2.KeyValue.SerializeToString,
                response_deserializer=datastore__pb2.BoolReply.FromString,
                _registered_method=True)
        self.StrGet = channel.unary_unary(
                '/datastore.DatastoreService/StrGet',
                request_serializer=datastore__pb2.Key.SerializeToString,
                response_deserializer=datastore__pb2.StringReply.FromString,
                _registered_method=True)
        self.LPush = channel.unary_unary(
                '/datastore.DatastoreService/LPush',
                request_serializer=datastore__pb2.KeyMultiValue.SerializeToString,
                response_deserializer=datastore__pb2.IntReply.FromString,
                _registered_method=True)
        self.RPush = channel.unary_unary(
                '/datastore.DatastoreService/RPush',
                request_serializer=datastore__pb2.KeyMultiValue.SerializeToString,
                response_deserializer=datastore__pb2.IntReply.FromString,
                _registered_method=True)
        self.LRange = channel.unary_unary(
                '/datastore.DatastoreService/LRange',
                request_serializer=datastore__pb2.RangeRequest.SerializeToString,
                response_deserializer=datastore__pb2.StringListReply.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/datastore.DatastoreService/Delete',
                request_serializer=datastore__pb2.Key.SerializeToString,
                response_deserializer=datastore__pb2.IntReply.FromString,
                _registered_method=True)
        self.SAdd = channel.unary_unary(
                '/datastore.DatastoreService/SAdd',
                request_serializer=datastore__pb2.KeyMultiValue.SerializeToString,
                response_deserializer=datastore__pb2.IntReply.FromString,
                _registered_method=True)
        self.SMembers = channel.unary_unary(
                '/datastore.DatastoreService/SMembers',
                request_serializer=datastore__pb2.Key.SerializeToString,
                response_deserializer=datastore__pb2.StringSetReply.FromString,
                _registered_method=True)
        self.HSet = channel.unary_unary(
                '/datastore.DatastoreService/HSet',
                request_serializer=datastore__pb2.HSetRequest.SerializeToString,
                response_deserializer=datastore__pb2.IntReply.FromString,
                _registered_method=True)
        self.HGet = channel.unary_unary(
                '/datastore.DatastoreService/HGet',
                request_serializer=datastore__pb2.HashField.SerializeToString,
                response_deserializer=datastore__pb2.StringReply.FromString,
                _registered_method=True)
        self.HGetAll = channel.unary_unary(
                '/datastore.DatastoreService/HGetAll',
                request_serializer=datastore__pb2.Key.SerializeToString,
                response_deserializer=datastore__pb2.HashMapReply.FromString,
                _registered_method=True)
        self.ZAdd = channel.unary_unary(
                '/datastore.DatastoreService/ZAdd',
                request_serializer=datastore__pb2.ZAddRequest.SerializeToString,
                response_deserializer=datastore__pb2.IntReply.FromString,
                _registered_method=True)
        self.ZRange = channel.unary_unary(
                '/datastore.DatastoreService/ZRange',
                request_serializer=datastore__pb2.ZRangeRequest.SerializeToString,
                response_deserializer=datastore__pb2.ZRangeReply.FromString,
                _registered_method=True)


class DatastoreServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StrSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StrGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LPush(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RPush(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SAdd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SMembers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HGet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HGetAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZAdd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatastoreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StrSet': grpc.unary_unary_rpc_method_handler(
                    servicer.StrSet,
                    request_deserializer=datastore__pb2.KeyValue.FromString,
                    response_serializer=datastore__pb2.BoolReply.SerializeToString,
            ),
            'StrGet': grpc.unary_unary_rpc_method_handler(
                    servicer.StrGet,
                    request_deserializer=datastore__pb2.Key.FromString,
                    response_serializer=datastore__pb2.StringReply.SerializeToString,
            ),
            'LPush': grpc.unary_unary_rpc_method_handler(
                    servicer.LPush,
                    request_deserializer=datastore__pb2.KeyMultiValue.FromString,
                    response_serializer=datastore__pb2.IntReply.SerializeToString,
            ),
            'RPush': grpc.unary_unary_rpc_method_handler(
                    servicer.RPush,
                    request_deserializer=datastore__pb2.KeyMultiValue.FromString,
                    response_serializer=datastore__pb2.IntReply.SerializeToString,
            ),
            'LRange': grpc.unary_unary_rpc_method_handler(
                    servicer.LRange,
                    request_deserializer=datastore__pb2.RangeRequest.FromString,
                    response_serializer=datastore__pb2.StringListReply.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=datastore__pb2.Key.FromString,
                    response_serializer=datastore__pb2.IntReply.SerializeToString,
            ),
            'SAdd': grpc.unary_unary_rpc_method_handler(
                    servicer.SAdd,
                    request_deserializer=datastore__pb2.KeyMultiValue.FromString,
                    response_serializer=datastore__pb2.IntReply.SerializeToString,
            ),
            'SMembers': grpc.unary_unary_rpc_method_handler(
                    servicer.SMembers,
                    request_deserializer=datastore__pb2.Key.FromString,
                    response_serializer=datastore__pb2.StringSetReply.SerializeToString,
            ),
            'HSet': grpc.unary_unary_rpc_method_handler(
                    servicer.HSet,
                    request_deserializer=datastore__pb2.HSetRequest.FromString,
                    response_serializer=datastore__pb2.IntReply.SerializeToString,
            ),
            'HGet': grpc.unary_unary_rpc_method_handler(
                    servicer.HGet,
                    request_deserializer=datastore__pb2.HashField.FromString,
                    response_serializer=datastore__pb2.StringReply.SerializeToString,
            ),
            'HGetAll': grpc.unary_unary_rpc_method_handler(
                    servicer.HGetAll,
                    request_deserializer=datastore__pb2.Key.FromString,
                    response_serializer=datastore__pb2.HashMapReply.SerializeToString,
            ),
            'ZAdd': grpc.unary_unary_rpc_method_handler(
                    servicer.ZAdd,
                    request_deserializer=datastore__pb2.ZAddRequest.FromString,
                    response_serializer=datastore__pb2.IntReply.SerializeToString,
            ),
            'ZRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ZRange,
                    request_deserializer=datastore__pb2.ZRangeRequest.FromString,
                    response_serializer=datastore__pb2.ZRangeReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'datastore.DatastoreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('datastore.DatastoreService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DatastoreService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StrSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datastore.DatastoreService/StrSet',
            datastore__pb2.KeyValue.SerializeToString,
            datastore__pb2.BoolReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StrGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datastore.DatastoreService/StrGet',
            datastore__pb2.Key.SerializeToString,
            datastore__pb2.StringReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LPush(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datastore.DatastoreService/LPush',
            datastore__pb2.KeyMultiValue.SerializeToString,
            datastore__pb2.IntReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RPush(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datastore.DatastoreService/RPush',
            datastore__pb2.KeyMultiValue.SerializeToString,
            datastore__pb2.IntReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datastore.DatastoreService/LRange',
            datastore__pb2.RangeRequest.SerializeToString,
            datastore__pb2.StringListReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datastore.DatastoreService/Delete',
            datastore__pb2.Key.SerializeToString,
            datastore__pb2.IntReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SAdd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datastore.DatastoreService/SAdd',
            datastore__pb2.KeyMultiValue.SerializeToString,
            datastore__pb2.IntReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SMembers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datastore.DatastoreService/SMembers',
            datastore__pb2.Key.SerializeToString,
            datastore__pb2.StringSetReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datastore.DatastoreService/HSet',
            datastore__pb2.HSetRequest.SerializeToString,
            datastore__pb2.IntReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datastore.DatastoreService/HGet',
            datastore__pb2.HashField.SerializeToString,
            datastore__pb2.StringReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HGetAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datastore.DatastoreService/HGetAll',
            datastore__pb2.Key.SerializeToString,
            datastore__pb2.HashMapReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ZAdd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datastore.DatastoreService/ZAdd',
            datastore__pb2.ZAddRequest.SerializeToString,
            datastore__pb2.IntReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ZRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/datastore.DatastoreService/ZRange',
            datastore__pb2.ZRangeRequest.SerializeToString,
            datastore__pb2.ZRangeReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

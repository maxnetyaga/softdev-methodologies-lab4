from typing import Literal, Protocol, overload


class DatastoreProtocol(Protocol):
    def strset(self, key: bytes, value: bytes) -> bool: ...
    def strget(self, key: bytes) -> bytes | None: ...
    def lpush(self, key: bytes, *values: bytes) -> int: ...
    def rpush(self, key: bytes, *values: bytes) -> int: ...
    def lrange(self, key: bytes, start: int, end: int) -> list[bytes]: ...
    def delete(self, key: bytes) -> int: ...

    def sadd(self, key: bytes, *members: bytes) -> int: ...
    def smembers(self, key: bytes) -> set[bytes]: ...

    @overload
    def hset(
        self, key: bytes, field: bytes, value: bytes, *, mapping: None = ...
    ) -> int: ...

    @overload
    def hset(
        self,
        key: bytes,
        field: None = ...,
        value: None = ...,
        *,
        mapping: dict[bytes, bytes],
    ) -> int: ...

    def hset(
        self,
        key: bytes,
        field: bytes | None = None,
        value: bytes | None = None,
        *,
        mapping: dict[bytes, bytes] | None = None,
    ) -> int: ...

    def hget(self, key: bytes, field: bytes) -> bytes | None: ...
    def hgetall(self, key: bytes) -> dict[bytes, bytes]: ...

    def zadd(self, key: bytes, mapping: dict[bytes, float]) -> int: ...
    @overload
    def zrange(
        self, key: bytes, start: int, end: int, withscores: Literal[True]
    ) -> list[tuple[bytes, int]]: ...

    @overload
    def zrange(
        self, key: bytes, start: int, end: int, withscores: Literal[False]
    ) -> list[bytes]: ...

    @overload
    def zrange(self, key: bytes, start: int, end: int) -> list[bytes]: ...

    def zrange(
        self, key: bytes, start: int, end: int, withscores: bool = False
    ) -> list[tuple[bytes, int]] | list[bytes]: ...
